import * from "../../Data/Tuple.tfun" ;
import * as Scanner from "./Parser/Scanner.tfun" ;
import * from "./Errors.tfun" ;
import * as ParserC from "./Parser/ParserC.tfun" ;
import * from "./Parser/Token.tfun" ;

data Expression* =
    LBool (Bool) Scanner.Location ;

let factor (scanner: Scanner.Scanner): ParserC.ParserResult Expression =
  match scanner.token.typ with
  | Scanner.TFalse -> ParserC.skipToken (\token = LBool False token.location) scanner
  | Scanner.TTrue -> ParserC.skipToken (\token = LBool True token.location) scanner
  | _ -> ParserC.syntaxError [TFalse, TTrue] scanner ;
    
let parse* (scanner: Scanner.Scanner): Result Errors Expression =
  ParserC.seq2 factor (ParserC.matchIgnoreToken EOS) (\f _ = f) scanner
    |> snd ;

let parseText* (text: String): Result Errors Expression =
  Scanner.fromString text |> parse
