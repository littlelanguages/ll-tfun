import * as Scanner from "./Parser/Scanner.tfun" ;
import * from "./Errors.tfun" ;
import * as ParserC from "./Parser/ParserC.tfun" ;

data Expression* =
    LBool (Bool) Scanner.Location ;

let factor (scanner: Scanner.Scanner): ParserC.ParserResult Expression =
  match scanner.token.typ with
  | Scanner.TFalse -> ParserC.skip (\token = LBool False token.location) scanner
  | Scanner.TTrue -> ParserC.skip (\token = LBool True token.location) scanner
  | _ -> ParserC.syntaxError ["False", "True"] scanner ;
    
let parse* (scanner: Scanner.Scanner): Result Errors Expression =
  match factor scanner with
  | (scannerp, Okay expression) -> 
      if (Scanner.atEnd scannerp)
        expression |> Okay
      else
        SyntaxError scannerp.token ["EOS"] |> Error
  | (scanner, Error error) -> Error error ;

let parseText* (text: String): Result Errors Expression =
  Scanner.fromString text |> parse
