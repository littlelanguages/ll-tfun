import * as Char from "../../../Data/Char.tfun" ;
import * as Int from "../../../Data/Int.tfun" ;

import Location, combine, toString as locationToString* from "./Location.tfun" ;

data TokenType* =
    UpperIdentifier
  | LowerIdentifier
  | LiteralChar
  | LiteralString
  | LiteralInt
  | TFalse
  | TTrue

  | As
  
  | Comma
  | Minus

  | EOS
  | ERROR ;

type Token* = 
  { typ: TokenType
  , location: Location
  , lexeme: String
  } ;

let toString* token =
  let location = locationToString token.location
  and lexeme = token.lexeme
  in
    match token.typ with
    | UpperIdentifier -> "UpperIdentifier " ++ lexeme ++ " " ++ location
    | LowerIdentifier -> "LowerIdentifier " ++ lexeme ++ " " ++ location
    | LiteralChar -> "LiteralChar " ++ lexeme ++ " " ++ location
    | LiteralString -> "LiteralString " ++ lexeme ++ " " ++ location
    | LiteralInt -> "LiteralInt " ++ lexeme ++ " " ++ location
    | TFalse -> "False " ++ location
    | TTrue -> "True " ++ location
    | As -> "as " ++ location
    | Comma -> "',' " ++ location
    | Minus -> "'-' " ++ location
    | EOS -> "EOS " ++ location
    | ERROR -> "ERROR " ++ lexeme ++ " " ++ location ;

let tokenTypeToString* typ =
  match typ with
  | UpperIdentifier -> "UpperIdentifier"
  | LowerIdentifier -> "LowerIdentifier"
  | LiteralChar -> "LiteralChar"
  | LiteralString -> "LiteralString"
  | LiteralInt -> "LiteralInt"
  | TFalse -> "False"
  | TTrue -> "True"
  | As -> "as"
  | Comma -> "','"
  | Minus -> "'-'"
  | EOS -> "EOS"
  | ERROR -> "ERROR"
