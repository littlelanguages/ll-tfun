import Maybe from "./Maybe.tfun" ;

let length* (s: String): Int =
  builtin "Data.String.length" s ;

let isEmpty* (s: String): Bool =
  (length s) == 0 ;

let slice* (start: Int) (end: Int) (s: String): String =
  builtin "Data.String.slice" start end s ;

let dropLeft* (n: Int) (s: String): String =
  slice n (length s) s ;

let dropRight* (n: Int) (s: String): String =
  slice 0 ((length s) - n) s ;

let startsWith* (needle: String) (haystack: String): Bool =
  let needleLength = length needle
  and haystackLength = length haystack in
  if (needleLength > haystackLength)
    False
  else
    (slice 0 needleLength haystack) == needle ;

let indexOf* (needle: String) (haystack: String): Maybe Int =
  builtin "Data.String.indexOf" needle haystack ;

let append* (s1: String) (s2: String): String =
  builtin "Data.String.append" s1 s2 ;

let reverse* (s: String): String =
  builtin "Data.String.reverse" s ;

let rec repeat* (n: Int) (s: String): String =
  if (n <= 0)
    ""
  else
    append s (repeat (n - 1) s) ;

let replace* (needle: String) (replacement: String) (haystack: String): String =
  builtin "Data.String.replace" needle replacement haystack