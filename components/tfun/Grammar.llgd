uses "./Scanner.llld";

Program
    : Element {";" Element}
    ;

Element
    : Expression
    | DataDeclaration
    | TypeAliasDeclarations
    | ImportStatement
    ;

Expression
    : Apply {"|>" Apply}
    ;

Apply
    : Relational {Relational}
    ;

Relational
    : Additive [RelationalOps Additive]
    ;

RelationalOps
    : "=="
    | "/="
    | "<"
    | "<="
    | ">"
    | ">="
    ;

Additive
    : Multiplicative {AdditiveOps Multiplicative}
    ;

AdditiveOps
    : "+"
    | "-"
    ;

Multiplicative
    : Typing {MultiplicativeOps Typing}
    ;

MultiplicativeOps
    : "*"
    | "/"
    ;

Typing
    : Projection [":" TypeType]
    ;

Projection
    : Factor {"." LowerIdentifier}
    ;

Factor
    : "(" [Expression {"," Expression}] ")"
    | LiteralInt
    | LiteralString
    | "True"
    | "False"
    | "\" Parameter {Parameter} [":" TypeType] "=" Expression
    | "let" ["rec"] ValueDeclaration {"and" ValueDeclaration} ["in" Expression]
    | "if" "(" Expression ")" Expression "else" Expression
    | UpperIdentifier ["." Identifier]
    | LowerIdentifier
    | "match" Expression "with" ["|"] Case {"|" Case}
    | "{" [LowerIdentifier ":" Expression {"," LowerIdentifier ":" Expression} ["|" Expression ]] "}"
    | "builtin" LiteralString
    ;

Identifier
    : LowerIdentifier
    | UpperIdentifier
    ;

ValueDeclaration
    : LowerIdentifier["*"] {Parameter} [":" TypeType] "=" Expression
    ;

Parameter
    : LowerIdentifier
    | "(" LowerIdentifier ":" TypeType ")"
    ;

Case
    : Pattern "->" Expression
    ;

Pattern
    : "(" [Pattern {"," Pattern}] ")"
    | LiteralInt
    | LiteralString
    | "True"
    | "False"
    | LowerIdentifier
    | UpperIdentifier ["." UpperIdentifier] {Pattern}
    | "{" [LowerIdentifier [":" Pattern] {"," LowerIdentifier [":" Pattern]} ["|" Pattern ]] "}"
    ;

DataDeclaration
    : "data" TypeDeclaration {"and" TypeDeclaration}
    ;

TypeDeclaration
    : UpperIdentifier["*" | "-"] {LowerIdentifier} "=" ConstructorDeclaration {"|" ConstructorDeclaration}
    ;

ConstructorDeclaration
    : UpperIdentifier {TypeType}
    ;

TypeType
    : ADTType {"->" ADTType}
    ;

ADTType
    : UpperIdentifier ["." UpperIdentifier] {TermType | UpperIdentifier ["." UpperIdentifier]}
    | TermType
    ;

TermType
    : LowerIdentifier
    | "(" [TypeType {"*" TypeType}] ")"
    | "{" [LowerIdentifier ":" TypeType {"," LowerIdentifier ":" TypeType} ["|" TypeType]] "}"
    ;

TypeAliasDeclarations
    : "type" TypeAliasDeclaration
    ;

TypeAliasDeclaration
    : UpperIdentifier["*" | "-"] {LowerIdentifier} "=" TypeType
    ;

ImportStatement
    : "import" ImportItems "from" LiteralString
    ;

ImportItems
    : "*" ["as" UpperIdentifier]
    | ImportItem {"," ImportItem}
    ;

ImportItem
    : UpperIdentifier ["*" | "-"]
    | LowerIdentifier ["as" LowerIdentifier] ["*"]
    ;
