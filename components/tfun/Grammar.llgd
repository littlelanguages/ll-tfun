uses "./Scanner.llld";

Program
    : Element {";" Element}
    ;

Element
    : Expression
    | DataDeclaration
    | ImportStatement
    ;

Expression
    : Relational {Relational}
    ;

Relational
    : Additive ["==" Additive]
    ;

Additive
    : Multiplicative {AdditiveOps Multiplicative}
    ;

AdditiveOps
    : "+"
    | "-"
    ;

Multiplicative
    : Factor {MultiplicativeOps Factor}
    ;

MultiplicativeOps
    : "*"
    | "/"
    ;

Qualified
    : Factor {"." Identifier}
    ;

Factor
    : "(" [Expression {"," Expression}] ")"
    | LiteralInt
    | LiteralString
    | "True"
    | "False"
    | "\" LowerIdentifier {LowerIdentifier} "->" Expression
    | "let" ["rec"] ValueDeclaration {"and" ValueDeclaration} ["in" Expression]
    | "if" "(" Expression ")" Expression "else" Expression
    | Identifier
    | "match" Expression "with" ["|"] Case {"|" Case}
    ;

Identifier
    : LowerIdentifier
    | UpperIdentifier
    ;

ValueDeclaration
    : LowerIdentifier["*"] {LowerIdentifier} "=" Expression
    ;

Case
    : Pattern "->" Expression
    ;

Pattern
    : "(" [Pattern {"," Pattern}] ")"
    | LiteralInt
    | LiteralString
    | "True"
    | "False"
    | LowerIdentifier
    | UpperIdentifier {Pattern}
    ;

DataDeclaration
    : "data" TypeDeclaration {"and" TypeDeclaration}
    ;

TypeDeclaration
    : UpperIdentifier["*" | "-"] {LowerIdentifier} "=" ConstructorDeclaration {"|" ConstructorDeclaration}
    ;

ConstructorDeclaration
    : UpperIdentifier {Type}
    ;

Type
    : ADTType {"->" ADTType}
    ;

ADTType
    : UpperIdentifier {Type}
    | TermType
    ;

TermType
    : LowerIdentifier
    | "(" [Type {"*" Type}] ")"
    ;

ImportStatement
    : "import" ImportItems "from" LiteralString
    ;

ImportItems
    : "*" ["as" UpperIdentifier ["*"]]
    | ImportItem {"," ImportItem}
    ;

ImportItem
    : UpperIdentifier["*" | "-"] ["as" UpperIdentifier]
    | LowerIdentifier["*"] ["as" LowerIdentifier]
    ;
