import * as Integer from "../../stdlib/Data/Integer.tfun" ;
import * as List from "../../stdlib/Data/List.tfun" ;
import * as Maybe from "../../stdlib/Data/Maybe.tfun" ;
import * as Result from "../../stdlib/Data/Result.tfun" ;
import * as String from "../../stdlib/Data/String.tfun" ;
import * as RE from "../../stdlib/Text/Regex.tfun" ;

let add (input: String): Result (List Int) Int =
  let content =
    if (input == "") 
      { separator: RE.parse ","
      , input: "0" 
      }
    else if (String.startsWith "//" input)
      match String.indexOf "\n" input with
      | Maybe.Nothing -> { separator: RE.parse ",", input: "0" }
      | Maybe.Just i ->
          let separator: String = String.slice 2 i input
           in if (String.startsWith "[" separator)
                { separator: RE.parse (List.join "|" (List.map RE.literal (RE.split (RE.parse "\]\[") (String.slice 1 ((String.length separator) - 1) separator))))
                , input: String.drop (i + 1) input
                }
              else
                { separator: RE.parse (RE.literal separator)
                , input: String.drop (i + 1) input
                }
    else
      { separator: RE.parse ",|\\n" 
      , input: input
      }
  and numbers = List.map (Maybe.withDefault 0) (List.map Integer.parse (RE.split content.separator content.input))
  and negative n = n < 0
   in if (List.any negative numbers)
        Result.Error (List.filter negative numbers)
      else
        Result.Okay (List.sum (List.filter (\n = n < 1001) numbers)) ;


