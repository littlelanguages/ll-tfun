\v = v ;;
// function: a -> a

\(v: Int) = v ;;
// function: Int -> Int

\v: Int = v ;;
// function: Int -> Int

\(v: Int): Int = v ;;
// function: Int -> Int

data List n = Nil | Cons n (List n) ;;
// List n = Nil | Cons n (List n)

let rec length xs = match xs with Nil -> 0 | Cons _ xsp -> 1 + (length xsp) ;;
// length = function: List a -> Int

